plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

group = 'kr.co.sampler.crawling'
version = '1.0'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

bootJar{
    archivesBaseName = 'web_crawler'
    archiveFileName = 'web_crawler.jar'
    archiveVersion = '0.0.1'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: '2.6.3'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'

    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'

    //db
    compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-autoconfigure', version: '2.0.0'
    runtimeOnly 'mysql:mysql-connector-java'
    compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.6.0'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    implementation(platform("org.apache.logging.log4j:log4j-bom:2.17.1"))

    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.10.3'

    // selenium
    implementation 'org.seleniumhq.selenium:selenium-java:4.1.2'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation ('org.junit.jupiter:junit-jupiter-api')
    testCompile ('org.junit.jupiter:junit-jupiter-params')
    testRuntime ('org.junit.jupiter:junit-jupiter-engine')
    testCompile ('org.mockito:mockito-junit-jupiter')
}

clean {
    delete file('src/main/generated') // 인텔리제이 Annotation processor 생성물 생성위치
}

configurations {
    all{
        exclude group: 'org.springframework.boot', module:'spring-boot-starter-logging'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

//log4j 보안 이슈 https://spring.io/blog/2021/12/10/log4j2-vulnerability-and-spring-boot
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.apache.logging.log4j') {
            details.useVersion '2.17.1'
        }
    }
}

ext['log4j2.version'] = '2.17.1'

ext.profile = (!project.hasProperty('profile') || !profile) ? 'local' : profile

sourceSets{
    main{
        resources {
            srcDirs "src/main/resources/resources-${profile}"
            exclude "resources-*"
        }
    }
}

test {
    useJUnitPlatform()
}
